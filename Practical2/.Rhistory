# for an introduction to the syntax of R. The syntax is fairly straightforward, and we won't
# be using too many "fancy" structures.
# The one from the file
print(simtab)
# The one from the file
simtab <- table(c(rep("Apples",53),rep("Bananas",12),rep("Cherries",102),rep("Dates",88)))
print(simtab)
barplot(simtab) to draw
simtab <- table(c(rep("Apples",53),rep("Bananas",12),rep("Cherries",102),rep("Dates",88)))
print(simtab)
# If you copy to following line (minus the hash/sharp sign) into the console, then it will produce a barplot.
barplot(simtab) to draw
simtab <- table(c(rep("Apples",53),rep("Bananas",12),rep("Cherries",102),rep("Dates",88)))
print(simtab)
# If you copy to following line (minus the hash/sharp sign) into the console, then it will produce a barplot.
barplot(simtab)
barplot(simtab)
# barplot(simtab) to draw
# This barplot uses the base graphics package of R.
# The following line turns our bar chart into a probability distribution, by dividing each frequency
# by the total.
simtabp <- simtab/(53+12+102+88)
simtabp <- simtab/(53+12+102+88)
# This next line will draw the probability distribution, using the base graphics package.
barplot(simtabp)
maTable <- table(c(rep("Students",3500),rep("Teachers",200),rep("Other staff",150)))
maTableP <- maTable/(maTable["Student"]+maTable["Teachers"]+maTable["Other staff"])
barplot(maTable)
maTable <- table(c(rep("Students",3500),rep("Teachers",200),rep("Other staff",150)))
maTableP <- maTable/(maTable["Student"]+maTable["Teachers"]+maTable["Other staff"])
barplot(maTable)
barplot(maTableP)
print(maTable["Student"])
maTable <- table(c(rep("Students",3500),rep("Teachers",200),rep("Other staff",150)))
maTableP <- maTable/(maTable["Student"]+maTable["Teachers"]+maTable["Other staff"])
print(maTable["Student"])
maTable <- table(c(rep("Students",3500),rep("Teachers",200),rep("Other staff",150)))
maTableP <- maTable/(maTable["Students"]+maTable["Teachers"]+maTable["Other staff"])
print(maTable["Students"])
barplot(maTable)
barplot(maTableP)
### These are some DISCRETE probability distributions.
# BINOMIAL DISTRIBUTION
# rbinom(t,n,p) creates t random binomial variables, each representing the number of successes out of n
# trials, where the probablility of success in any given trial is p.
# 10000 RVs, n=10, p=0.1
xbin <- rbinom(10000,10,0.1)
tabbin <-table(xbin)
tabbinp <- tabbin/10000
barplot(tabbin)
barplot(tabbinp)
barplot(tabbin)
dice <- rbinom(15,1:6,1/6)
dice <- rbinom(15,1:6,1/6)
dice <- rbinom(15,1:6,1/6)
barplot(dice)
dice <- rbinom(15,6,1/6)
barplot(dice)
# Perform 15000 simuations, and plot the results.
dice <- rbinom(15000,2,(1/6))
barplot(dice)
dice <- rbinom(15000,6,(1/6))
barplot(dice)
dice <- rbinom(15000,2,(1/6))
tabDice <- table(dice)
dice <- rbinom(15000,2,(1/6))
tabDice <- table(dice)
barplot(tabDice)
dice <- rbinom(15000,6,2)
tabDice <- table(dice)
barplot(tabDice)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
barplot(tabDice)
dice
dice
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
barplot(tabDice)
dice <- rbinom(2,15000,(1/6))
tabDice <- table(dice)
barplot(tabDice)
# Perform 15000 simuations, and plot the results.
dice <- rbinom(15000,2,(1/6))
tabDice <- table(dice)
barplot(tabDice)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
barplot(tabDice)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
barplot(tabDiceP)
dice <- rbinom(15000,15,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
barplot(tabDiceP)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
barplot(tabDiceP)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
dice <- rbinom(15000,6,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
dice <- rbinom(15000,15,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
barplot(tabDiceP)
xpois <- rpois(10000,4)
tabpois <- table(xpois)
tabpoisp <- tabpois/10000
barplot(tabpois)
barplot(tabpoisp)
xbin <- rbinom(10000,10,0.1)
tabbin <-table(xbin)
tabbinp <- tabbin/10000
xbin <- rbinom(10000,10,0.1)
tabbin <-table(xbin)
tabbinp <- tabbin/10000
dice <- rbinom(15000,15,(1/6))
tabDice <- table(dice)
tabDiceP <- tabDice/15000
barplot(tabDice)
xpois <- rpois(10000,4)
tabpois <- table(xpois)
tabpoisp <- tabpois/10000
barplot(tabpois)
barplot(tabDice)
barplot(tabDiceP)
# POISSON DISTRIBUTION
barplot(tabDice)
xunif
xunif
xunif <- ceiling(runif(10000,0,6))
tabunif <- table(xunif)
tabunifp <- tabunif/10000
# barplot(tabunif) from the command line to draw this
barplot(tabunif) from the command line to draw this
xunif <- ceiling(runif(10000,0,6))
tabunif <- table(xunif)
tabunifp <- tabunif/10000
barplot(tabunif) #from the command line to draw this
barplot(tabunifp)#for the probability distribution
xmiss <- c(rep(1,1000),rep(2,1),rep(3,1000),rep(4,1000),rep(5,1000),rep(6,1000))
tabxmiss <- table(xmiss)
tabxmissp <- tabxmiss/5001
barplot(tabxmiss) #from the command line to draw this
barplot(tabxmissp)# for the probability distribution
# OUTLIERS
# Massively bump up the value of 10 in tabpois
tabpois2 <- tabpois # make a copy
tabpois2[11] <- 2000 # replace the 11th element of the table (i.e. X=10) with 2000
barplot(tabpois2)
# rnorm(t,mu,sd) creates t normal random variables, each with mean mu and standard deviation sd.
xnorm <- rnorm(10000,150,25) # mean 150, sd 25
hist(xnorm) #will draw the histogram
hist(xnorm,breaks=100) #will draw the histogram with 100 bins
myNorm <- rnorm(5000,65,20) #Weight in kilogramms
hist(xnorm)
myNorm <- rnorm(5000,65,20) #Weight in kilogramms
hist(myNorm)
myNorm <- rnorm(5000,65,20) #Weight in kilogramms
hist(myNorm,breaks = 10)
myNorm <- rnorm(5000,65,20) #Weight in kilogramms
hist(myNorm,breaks = 100)
myNorm <- rnorm(5000,65,15) #Weight in kilogramms
hist(myNorm,breaks = 100)
height <- seq(50,250,length=200)
probden <- dnorm(height,150,25)
plot(height,probden,type="l")
height <- seq(30,120,length=90)
probden <- dnorm(weight,65,20)
weight <- seq(30,120,length=90)
probden <- dnorm(weight,65,20)
plot(height,probden,type="l")
boxplot(xnorm)
weight <- seq(30,120,length=90)
probden <- dnorm(weight,65,20)
plot(height,probden,type="l")
weight <- seq(30,120,length=90)
probden <- dnorm(weight,65,20)
plot(weight,probden,type="l")
xf1 <- rf(10000,5,2) # too many repeats just gives large values
xf2 <- rf(10,5,2)
hist(xf1,xlim=c(0,7),breaks=30000)
boxplot(xf2)
len <- seq(0,5,length=100)
probdenf <- df(len,5,2)
# plot(len,probdenf,type="l")
len <- seq(0,5,length=100)
probdenf <- df(len,5,2)
plot(len,probdenf,type="l")
contable <- matrix(c(12,8,16,4,3,5,6,9,12),ncol=3,byrow=TRUE)
colnames(contable) <- c("Golf","Football","Swimming")
rownames(contable) <- c("Apples","Pears","Carrots")
# this line is needed since the barplot function expects a table, not a matrix.
contable <- as.table(contable)
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
barplot(contablet,legend.text=TRUE) #produces a stacked bar chart, with rows along the bottom
barplot(contablet,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contablet <- t(contable) # transpose it
barplot(contablet,legend.text=TRUE) #produces a stacked bar chart, with rows along the bottom
barplot(contablet,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,122000,54250),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contablet <- t(contable) # transpose it
barplot(contablet,legend.text=TRUE) #produces a stacked bar chart, with rows along the bottom
contable <- matrix(c(41000,133000,1000532,122000,54250,1695300),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contablet <- t(contable) # transpose it
barplot(contablet,legend.text=TRUE) #produces a stacked bar chart, with rows along the bottom
barplot(contablet,legend.text=TRUE) #produces a stacked bar chart, with rows along the bottom
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,10000,122000,54250,10000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,10000,122000,54250,10000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
contable <- matrix(c(41000,133000,12000,122000,54250,10000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,200000,122000,54250,10000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,120000,122000,54250,10000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contable <- matrix(c(41000,133000,120000,100000,125000,102000),ncol=2,byrow=TRUE)
colnames(contable) <- c("British","French")
rownames(contable) <- c("Trains","Boats","Cars")
barplot(contable,legend.text=TRUE) #produces a stacked bar chart, with columns along the bottom
barplot(contable,beside=TRUE,legend.text=TRUE) #produces a grouped bar chart
contablet <- t(contable) # transpose it
# discrete vs cts: grouped data
# We will use boxplots to draw several continuous data sets, each of which represents a different category.
# We all know East Lothian is the best of the Lothians, and here is a demonstration of that fact.
lothians <- data.frame(East=rnorm(1000,185,12),Mid=rnorm(1000,160,13),West=rnorm(1000,140,10))
boxplot(lothians,ylab="Height (cm)") #to draw
# Now we will draw them as distributions on the same set of axes.
heightE <- seq(50,250,length=200)
probdenE <- dnorm(height,185,12)
probdenM <- dnorm(height,160,13)
probdenW <- dnorm(height,140,10)
plot(heightE,probdenW,type="l",col="blue",xlab="Height",ylab="Density")
lines(heightE,probdenM,col="red")
lines(heightE,probdenE,col="green")
lothians <- data.frame(East=rnorm(1000,185,12),Mid=rnorm(1000,160,13),West=rnorm(1000,140,10))
boxplot(lothians,ylab="Height (cm)") #to draw
# Now we will draw them as distributions on the same set of axes.
heightE <- seq(50,250,length=200)
probdenE <- dnorm(height,185,12)
probdenM <- dnorm(height,160,13)
probdenW <- dnorm(height,140,10)
# draw the one with lowest sd first
# Put each of the following commands in separately.
plot(heightE,probdenW,type="l",col="blue",xlab="Height",ylab="Density")
lines(heightE,probdenM,col="red")
lines(heightE,probdenE,col="green")
# cts vs cts
heightE <- seq(50,250,length=90)
plot(heightE,probdenW,type="l",col="blue",xlab="Height",ylab="Density")
lines(heightE,probdenM,col="red")
lines(heightE,probdenE,col="green")
# cts vs cts
# We need to create some data. A normal way to do this is to introduce "jitter" into a random variable
# This stops data looking too clean.
xs <- seq(-4,4,length=200) # create 200 points between -4 and 4
jitter1 <- rnorm(200,0,0.5) # create some random jitter
jitter2 <- rnorm(200,0,0.25) # smaller jitter
# The right-hand side of each of the following shows what kind of curve we will expect. Here, it is linear.
ys1 <- xs + jitter1 # create the y-values
plot(xs,ys1)
abline(lm(ys1~xs),col="red")
ys2 <- xs^2/2 + jitter1
plot(xs,ys2)
abline(lm(ys2~xs),col="red")
lines(lowess(xs,ys2),col="blue")
# Negative linear
ys3 <- jitter1 - xs
plot(xs,ys3)
abline(lm(ys3~xs), col="red")
# A sine curve
ys4 <- sin(xs) + jitter2
plot(xs,ys4)
abline(lm(ys4~xs), col="red")
lines(lowess(xs,ys4),col="blue")
height <- seq(50,250,length=200)
heightE <- seq(50,250,length=200)#90
probdenE <- dnorm(height,185,12)
probdenM <- dnorm(height,160,13)
probdenW <- dnorm(height,140,10)
plot(heightE,probdenW,type="l",col="blue",xlab="Height",ylab="Density")
ys4 <- sin(xs) + jitter2
plot(xs,ys4)
abline(lm(ys4~xs), col="red")
lines(lowess(xs,ys4),col="blue")
# outlier for cts vs cts
jitter3 <- c(rnorm(20,0,0.5),6,rnorm(179,0,0.5))
ys5 <- xs + jitter3
plot(xs,ys5)
abline(lm(ys5~xs),col = "red")
